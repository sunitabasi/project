# -*- coding: utf-8 -*-
"""project insurance 2nd.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PHKbThbpLe0F3i0rh0rrqoiZZNceXzA7
"""

# Commented out IPython magic to ensure Python compatibility.
import scipy.stats as stats
import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import warnings
# %matplotlib inline
warnings.filterwarnings('ignore')

df = pd.read_csv('insurance.csv')
insured = df.copy()

insured.head()

insured.tail()

insured.info()

#changing object data type to category
insured['sex'] = insured['sex'].astype('category')
insured['smoker'] = insured['smoker'].astype('category')
insured['region'] = insured['region'].astype('category')

insured.info()

insured.describe()

insured.shape
print("Rows :", insured.shape[0])
print("Columns :",insured.shape[1])

print("Values :\n", insured.values)
print("Features :\n", insured.columns)

insured['sex'].value_counts()

insured['smoker'].value_counts()



insured['region'].value_counts()

#selecting the category type columns from insured df
list_col = insured.select_dtypes(['category']).columns
list_col

dict(insured.sex.value_counts())

dict(insured.smoker.value_counts())

for i in range(len(list_col)):
  print(insured[list_col[i]].value_counts())

len(insured[insured['sex'] == 'male'])

#plotting in bar diagram using plotly- univariant analysis
male_count = len(insured[insured['sex']==  'male'])
female_count = len(insured[insured['sex'] == 'female'])
plt.bar(['male','female'],[male_count,female_count],color = ['b','m'], label = ['Male','Female'])
plt.title("Total count")
plt.legend()
plt.show()

plot_data = dict(insured['sex'].value_counts())
plot_data
plt.bar(['male','female'],[plot_data['male'],plot_data['female']],color = ['b','m'], label = ['Male','Female'])
plt.legend()
plt.show()
print(plot_data)

plot_data= dict(insured['smoker'].value_counts())
plt.bar(['no','yes'],[plot_data['no'],plot_data['yes']],color = ['g','r'], label = ['non smoker','smoker'])
plt.legend()
plt.show()
print(plot_data)

# in alternate ways
reg_southwest = len(insured[insured['region']=='southwest'])
reg_southeast = len(insured[insured['region']== 'southeast'])
reg_northeast = len(insured[insured['region'] == 'northeast'])
reg_northwest = len(insured[insured['region'] == 'northwest'])
plt.figure(figsize=(10,7))
plt.bar(['southwest','southeast','northeast','northwest'],[reg_southwest,reg_southeast,reg_northeast,reg_northwest], color = ['r','g','y','m'], label = ['southwest','southeast','northwest','northast'])
plt.legend()
plt.show()

plot_data.keys()

plot_data.values()

plot_data = dict(insured['smoker'].value_counts())
plt.bar(plot_data.keys(),plot_data.values(),color = ['g','r'], label = plot_data.keys())
plt.title("total no of people")
plt.legend()
plt.show()

print(plot_data)

insured['smoker'].value_counts().plot.bar()

insured['region'].value_counts().plot.pie(explode=(0,0.1,0,0),autopct= '%1.1f%%')

#analyzing categorical value in list format
data = {}
list_col = insured.select_dtypes(['category']).columns  # only selects categorical columns
for i in range(len(list_col)):
  values = list(insured[list_col[i]].value_counts())
  sub_values = list(insured[list_col[i]].value_counts().index)
  data[list_col[i]] = (sub_values,values)
print(data)

#bar graph
plt.bar(data['sex'][0],data['sex'][1],color = ['k','b'],label= data['sex'][1])
plt.legend()
plt.show()

#alternate way
print(data['region'])
plt.bar(data['region'][0],data['region'][1],color = ['r','b','k','m'], label = data['region'][1])
plt.title('Population on the basis of region')

plt.legend()
plt.show()

# bivariant analysis
insured

corr_insured = insured[['age','expenses','bmi']] # conducting corelation analysis of numerical data

corr_insured.corr()

# plotting in seaborn using heatmap
plt.figure(figsize=(14,5))
sns.heatmap(corr_insured.corr(),annot = True)   # annot annotate the value
plt.show()

plt.figure(figsize = (15,5))  #it displays pairwise relationship between the data set
sns.pairplot(data=insured)
plt.show()

plt.figure(figsize=(10,4))
ax=sns.countplot(x = 'region',hue ='sex', data= insured)

#defining function to create bar diagram with percentage
def bar_perc(plot,feature):
  total = len(feature)  #len of the column
  for p in plot.patches:
      percentage = '{:.1f}%'.format(100*p.get_height()/total) #per calculation with only one decimal value
      x = p.get_x() + p.get_height()/2-0.05  #width of the plot
      y = p.get_y() + p.get_height()          # height of the plot
      plot.annotate(percentage,(x,y),size = 15)

plt.figure(figsize=(10,5))
plot = sns.countplot(x = 'sex', hue = 'smoker', data= insured)
#bar_perc(plot,insured.sex)

# groupby function
insured.groupby(insured['smoker']).expenses.mean()

insured.groupby(insured['sex']).expenses.mean()

plot_data  = dict(insured.groupby(insured['region']).expenses.mean())
plot_key = list(plot_data.keys())
plot_values = list(plot_data.values())
print(plot_key)
print(plot_values)
plot_data

insured.groupby(insured['region']).expenses.mean().plot.bar()

# using seaborn for more than one data
sns.barplot(x = insured.sex, y = insured.expenses). set(title = 'expenses vs gender')

sns.barplot(x = insured.region, y = insured.expenses).set(title= 'expenses vs region')

#multivariate analysis
plt.figure(figsize=(15,5))
sns.lineplot(x = insured['sex'],y = insured['expenses'],hue = insured['region'],ci=1).set(title= "expenses of male and female in each region")
plt.legend(bbox_to_anchor=(0.1,0.7))
plt.show()

plt.figure(figsize=(15,5))
sns.lineplot(x = insured['sex'],y = insured['expenses'],hue = insured['smoker'],ci=1).set(title= "Total expenses of smoker male and female")
plt.show()

#crosstab function pd.crosstab() is a Pandas function used to compute a cross-tabulation of two (or more) factors.it takes several parameters index,column,values,aggfunc
sex_region_expenses = pd.crosstab(index = insured['sex'],columns = insured.region, values = insured.expenses, aggfunc = 'mean')
sex_region_expenses

smoker_sex_expenses = pd.crosstab(index=insured['smoker'], columns = insured.sex, values = insured.expenses, aggfunc = 'mean')
smoker_sex_expenses

smoker_sex_expenses.plot(kind='bar', title = 'Total expenses of smoker wrt sex')
plt.show()

sex_region_expenses.plot(kind ='bar',title = 'Total expenses of male female wrt region')
plt.show()

#converting quantitative data to qualitative
insured

insured.describe()

# creating groups pd.cut() is a Pandas function used to segment and sort data values into bins
category = pd.cut(insured.age,bins = [10,20,30,40,50,60,70], labels = ['10-20','20-30','30-40','40-50','50-60','60-70'])
category

insured.insert(1, 'age_group',category)

insured

category1 = pd.cut(insured.bmi,bins = [10,20,30,40,50,60], labels = ['10-20','20-30','30-40','40-50','50-60'])
category1

insured.insert(4,'bmi_group',category1)

insured

insured.head()

# calculate average expenses by groupwise
age_group = insured.groupby(insured.age_group).expenses.mean()
age_group

age_group.plot(kind = 'bar', title = 'Agegroup vs avg expenses') # plotting data with their avg expenses

bmi_group= insured.groupby(insured.bmi_group).expenses.mean()
bmi_group

bmi_group.plot(kind='bar',title = ' Expenses wrt bmi group')

#multivariant data analysis using groupby
insured.groupby(['sex','region','bmi_group']).expenses.mean()

insured.groupby(['sex','region','bmi_group']).expenses.mean().unstack().plot(kind='bar', title= 'bmi_group Vs expenses') #unstack-reshapes the grouped data from a multi-index Series to a DataFrame

insured.groupby(['sex','region','bmi_group']).expenses.mean().unstack()

insured.groupby(['sex','region','bmi_group']).expenses.mean().plot(kind='bar', title= 'bmi_group Vs expenses')

plt.figure(figsize=(15,5))
sns.barplot(x= insured['region'], y = insured['expenses'],hue = insured['sex'],ci=0).set(title = 'Expenses of male female wrt region')
plt.legend(bbox_to_anchor=(1,1))
plt.show()

sns.barplot(x = 'smoker',y = 'bmi',hue = 'sex',data = insured).set(title = 'smoker Vs bmi Vs gender')
plt.legend(bbox_to_anchor=(1,1))

# relplot creates a relational plot(scatterplot)
sns.relplot(x = insured['age'],y = insured['expenses'],hue=insured['sex'], size = insured['smoker'],
            sizes=(40,500), palette ="spring",
            height=6, data= insured)
plt.title('expense by age, sex and smoker')
plt.show()

sns.relplot(x = insured['bmi'],y = insured['expenses'],hue=insured['smoker'], size = insured['region'],
            sizes=(40,500), palette ="spring",
            height=6, data= insured)
plt.title('expense by bmi, region and smoker')
plt.show()



