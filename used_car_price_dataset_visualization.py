# -*- coding: utf-8 -*-
"""used car price dataset visualization

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T2Gmd1Opo35JO5w-vYY9T7TUue5_02FI
"""

#Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.DataFrame(pd.read_csv('used_car_dataset.csv'))
df

df.columns

df.info()



# def update_km(kilometer):
#   kilometer = kilometer.replace('km','').replace(',','').split()
#   return kilometer
# df['kms_driven']=df['kms_driven'].apply(update_km)
# print(df['kms_driven'])
df['kms_driven'] = df['kms_driven'].apply(lambda x:''.join(x).replace('km','').replace(',','').strip()).astype("float")
print(df['kms_driven'])

df





def convert_price(carprice):
  carprice = carprice.replace('â‚¹','').replace(',','').strip()
  if 'Lakh' in carprice:
    number = float(carprice.replace('Lakh','').strip())
    return number *100000/1000
  elif 'Crore' in carprice:
    number =float(carprice.replace('Crore','').strip())
    return number *10000000/1000
  else:
    return float(carprice)



df['car_price_in_rupees'] = df['car_price_in_rupees'].apply(convert_price)
df['car_price_in_rupees']

df = df.rename(columns={'car_price_in_rupees' :"carprice['000']"})
df

df

row,col = df.shape
print("No of row = ",row)
print("No of col = ",col)

df.shape

df.info()

# Counting Duplicate Values
Duplicate_Value = df.duplicated().sum()
print(f'Number of duplicated rows are = {Duplicate_Value}')

df = df.drop_duplicates()

# Checking Again
print("Number of rows : ",df.shape[0])
print("Number of columns : ",df.shape[1])
print("Number of Duplicate values are =" ,df.duplicated().sum())

df.info()



df.describe()

df['year_of_manufacture'].value_counts()

df['car_name'].value_counts()

df['fuel_type'].value_counts()

df['city'].value_counts()

print("Values :\n", df.values)
print("Features :\n", df.columns)

sns.histplot(df['fuel_type'])

# as we know that there are diesel +1 and pertrol+1 so we are going to combine these 2 fuel type to diesel and petrol resp.
df.loc[df["fuel_type"] == "Diesel + 1", "fuel_type"] = "Diesel"

df.loc[df["fuel_type"] == "Petrol + 1", "fuel_type"] = "Petrol"

sns.histplot(df['fuel_type'])

df['fuel_type'].value_counts()

df = df.drop(df[(df.fuel_type == "Hybrid")].index)
# removing the 2 type of fuel as they are very low in numbers and not so common. Further as we know that CNG and Electric both are eco fuel
# so we rename these both type with eco_fuel

df = df.drop(df[(df.fuel_type == "LPG")].index)

df['fuel_type'] = df['fuel_type'].replace(['Electric', 'CNG'], 'eco_fuel')

sns.histplot(df['fuel_type'])   # by cleaning the data we can observe the data closely and relatively

#data = df['fuel_type]
# fuel = pd.get_dummies(df['fuel_type'], drop_first = False)
# fuel

# fuel = pd.concat([df,fuel],axis = 1)
# fuel

# fuel= fuel.drop(['fuel_type'],axis = 1)

# cleaning car name

# firstcleaning the name with only first word
df.insert(1, "car_brand", df["car_name"].str.split(" ").str[0])
df

df= df.drop(['car_name'],axis = 1)
df

df['car_brand'].value_counts()

top_10_car_names = df['car_brand'].value_counts().nlargest(10)

# Filter the DataFrame to keep only the rows with car names in the top 10
df = df[df['car_brand'].isin(top_10_car_names.index)]

df['car_brand'].value_counts()

plt.figure(figsize=(10,5))

plot = sns.countplot(x = 'year_of_manufacture', hue = 'car_brand', data= df)
#bar_perc(plot,insured.sex)

df.groupby(df['fuel_type']).kms_driven.mean()

df.groupby(df['car_brand']).kms_driven.mean()

# groupby function

plot_data  = dict(df.groupby(df['car_brand']).kms_driven.mean())
plot_key = list(plot_data.keys())
plot_values = list(plot_data.values())
print(plot_key)
print(plot_values)

df.groupby(df['car_brand']).kms_driven.mean().plot.bar()

plt.xlabel('Car Brand')
plt.ylabel('Average Kilometers Driven')
plt.title('Average Kilometers Driven by Car Brand')
plt.show()

# we wil be calculating the number of car produced in cartain year
# Filter the DataFrame for cars produced in the year 2020
df_2020 = df[df['year_of_manufacture'] == 2020]

# Group by 'car_brand' and count the occurrences
car_brand_counts_2020 = df_2020['car_brand'].value_counts()

# Plot the result as a bar plot
car_brand_counts_2020.plot(kind='bar', figsize=(10, 6))

plt.xlabel('Car Brand')
plt.ylabel('Number of Cars Produced')
plt.title('Number of Cars Produced by Each Brand in 2020')
plt.grid(axis='y')
plt.show()

#crosstab function pd.crosstab() is a Pandas function used to compute a cross-tabulation of two (or more) factors.it takes several parameters index,column,values,aggfunc
car_brand_fuel_type_carprice = pd.crosstab(index=df['car_brand'], columns=df['fuel_type'], values=df["carprice['000']"], aggfunc='mean')

print(car_brand_fuel_type_carprice)

car_brand_fuel_type_carprice.plot(kind='bar',title = 'Total car price and fuel type')
plt.show()

df= df.sort_values(by = "carprice['000']",ascending = True)

plt.figure(figsize=(15,5))
x = df['car_brand']
y = df["carprice['000']"]
plt.bar(x,y, color = ['r','b','g','k','m','y','c'])
plt.xlabel('brand name')
plt.ylabel('car price ')
plt.title('car price to brand names')

#plt.legend()
plt.plot()
plt.show()





# Group by year_of_manufacture and car_brand, then count occurrences
grouped = df.groupby(['year_of_manufacture', 'car_brand']).size().reset_index(name='counts')

# Pivot the table to have years as the index and car brands as columns
pivot_table = grouped.pivot(index='year_of_manufacture', columns='car_brand', values='counts').fillna(0)

# Plot the data
plt.figure(figsize=(10, 6))
pivot_table.plot(kind='line', figsize=(12, 8), marker='o')

plt.xlabel('Year of Manufacture')
plt.ylabel('Count')
plt.title('Car Brands Manufactured Over the Years')
plt.legend(title='Car Brand', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.show()

plt.figure(figsize=(10, 6))
plt.scatter(df['year_of_manufacture'], df['car_brand'])
plt.xlabel('Year')
plt.ylabel('Car Brand')
plt.title('Car manufactured over the period')
plt.grid(True)
plt.show()



import plotly.express as px

# Line plot
fig = px.line(df, x='fuel_type', y='year_of_manufacture', title='Car Prices Over Years')
fig.show()

import plotly.express as px

# Bar plot
fig = px.bar(df, x='fuel_type', y='city', title='Average Car Prices by Fuel Type',
             labels={'car_price_in_rupees': 'km_driven'},
             category_orders={'fuel_type': ['Petrol', 'Diesel', 'eco_fuel']},
             color='fuel_type')
fig.show()

import plotly.express as px

# Assuming 'car_brand' and 'city' are columns in your DataFrame
plt.figure(figsize=(10, 6))
sns.countplot(x='car_brand', hue='city', data=df)
plt.title('Cars Sold to Each City')
plt.ylabel('Count')
plt.xlabel('Car Brand')
plt.legend(title='City')
plt.show()

import plotly.express as px

# Pie chart
fig = px.pie(df, names='city', title='Car Distribution by City')
fig.show()

















df= df.iloc[:,2:]

df























plt.figure(figsize=(16,9))
corr = data.corr()
sns.heatmap(corr, annot=True, cmap='Set2')
plt.show()













































